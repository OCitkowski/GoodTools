{1,
{10,
{"V 1.1",1,0,"",""},
{15,
{"Раскладка клавиатуры",1,0,"",""},
{0,
{"є",0,0,"э","є"}
},
{0,
{"і",0,0,"ы","і"}
},
{0,
{">",0,0,"Ю",">"}
},
{0,
{"<",0,0,"Б","<"}
},
{0,
{"<>",0,0,"БЮ","<>"}
},
{0,
{"<=",0,0,"Б=","<="}
},
{0,
{">=",0,0,"Ю=",">="}
},
{0,
{"ЕстьТгдд",0,0,"ЕстьТгдд","ЕстьNULL(<?>, 0)"}
},
{0,
{"NULL",0,0,"тгдд","NULL"}
},
{0,
{"[",0,0,"х ","["}
},
{0,
{"]",0,0,"ъ ","]"}
},
{0,
{"|",0,0,"\ ","|"}
},
{0,
{"'",0,0,"ё","'"}
},
{0,
{"&НаСервере",0,0,"ёСе","&НаСервере"}
},
{0,
{"&НаКлиенте",0,0,"ёкл","&НаКлиенте"}
}
},
{18,
{"Управляющие",1,0,"",""},
{0,
{"Если",0,1,"Ес[ли]","Если <?""Условие""> Тогда

	<?>

КонецЕсли;"}
},
{0,
{"ЕслиИначе",0,0,"Ес[лиИначе]","Если <?""Условие""> Тогда

	<?>

Иначе

	

КонецЕсли;"}
},
{0,
{"Пока",0,0,"По[ка]","Пока <?""Условие""> Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Для",0,0,"Дл[я]","Для <?""Счетчик""> По <?""Ограничение""> Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Для каждого",0,0,"Дл[я каждого]","Для Каждого <?""Переменная""> Из <?""Коллекция""> Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Процедура",0,0,"Пр[оцедура]","Процедура <?""Имя процедуры"">()

	<?>

КонецПроцедуры
"}
},
{0,
{"Процедура (с заголовком)",0,0,"Пр[оцедура (с заголовком)]","//<Описание процедуры>
//
//Параметры:
//	<Параметр1> - <Тип.Вид> - <описание параметра>
//					<продолжение описания параметра>
//	<Параметр2> - <Тип.Вид> - <описание параметра>
//					<продолжение описания параметра>
//
Процедура <?""Имя процедуры"">()

	<?>

КонецПроцедуры // <?""Имя процедуры"">()
"}
},
{0,
{"Процедура модуля формы (с директивой компиляции)",0,0,"Пр[оцедура модуля формы (с директивой компиляции)]","//<Описание процедуры>
//
//Параметры:
//	<Параметр1> - <Тип.Вид> - <описание параметра>
//					<продолжение описания параметра>
//	<Параметр2> - <Тип.Вид> - <описание параметра>
//					<продолжение описания параметра>
//
&<?""Выберите директиву компиляции"", ВыборВарианта, ""НаКлиенте"", ""НаКлиенте"", ""НаСервере"", ""НаСервере"", ""НаСервереБезКонтекста"", ""НаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста"">
Процедура <?""Имя процедуры"">()

	<?>

КонецПроцедуры // <?""Имя процедуры"">()
"}
},
{0,
{"Процедура модуля команды  (с директивой компиляции)",0,0,"Пр[оцедура модуля команды  (с директивой компиляции)]","//<Описание процедуры>
//
//Параметры:
//	<Параметр1> - <Тип.Вид> - <описание параметра>
//					<продолжение описания параметра>
//	<Параметр2> - <Тип.Вид> - <описание параметра>
//					<продолжение описания параметра>
//
&<?""Выберите директиву компиляции"", ВыборВарианта, ""НаКлиенте"", ""НаКлиенте"", ""НаСервере"", ""НаСервере"", ""НаКлиентеНаСервере"", ""НаКлиентеНаСервере"">
Процедура <?""Имя процедуры"">()

	<?>

КонецПроцедуры // <?""Имя процедуры"">()
"}
},
{0,
{"Функция",0,0,"Фу[нкция]","Функция <?""Имя функции"">()

	<?>
	
	Возврат <?""Значение"">;

КонецФункции // <?""Имя функции"">()
"}
},
{0,
{"Функция (с заголовком)",0,0,"Фу[нкция (с заголовком)]","//<Описание функции>
//
//Параметры:
//	<Параметр1> - <Тип.Вид> - <описание параметра>
//					<продолжение описания параметра>
//	<Параметр2> - <Тип.Вид> - <описание параметра>
//					<продолжение описания параметра>
//
// Возвращаемое значение:
//	<Тип.Вид> - <описание возвращаемого значения>
//
Функция <?""Имя функции"">()

	<?>
	
	Возврат <?""Значение"">;

КонецФункции // <?""Имя функции"">()
"}
},
{0,
{"Функция модуля формы  (с директивой компиляции)",0,0,"Фу[нкция модуля формы  (с директивой компиляции)]","// <Описание функции>
//
//Параметры:
//	<Параметр1> - <Тип.Вид> - <описание параметра>
//					<продолжение описания параметра>
//	<Параметр2> - <Тип.Вид> - <описание параметра>
//					<продолжение описания параметра>
//
//Возвращаемое значение:
//	<Тип.Вид> - <описание возвращаемого значения>
//
&<?""Выберите директиву компиляции"", ВыборВарианта, ""НаКлиенте"", ""НаКлиенте"", ""НаСервере"", ""НаСервере"", ""НаСервереБезКонтекста"", ""НаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста"">
Функция <?""Имя функции"">()

	<?>
	
	Возврат <?""Значение"">;

КонецФункции // <?""Имя функции"">()
"}
},
{0,
{"Функция модуля команды  (с директивой компиляции)",0,0,"Фу[нкция модуля команды  (с директивой компиляции)]","// <Описание функции>
//
//Параметры:
//	<Параметр1> - <Тип.Вид> - <описание параметра>
//					<продолжение описания параметра>
//<Параметр2> - <Тип.Вид> - <описание параметра>
//					<продолжение описания параметра>
//
//Возвращаемое значение:
//	<Тип.Вид> - <описание возвращаемого значения>
//
&<?""Выберите директиву компиляции"", ВыборВарианта, ""НаКлиенте"", ""НаКлиенте"", ""НаСервере"", ""НаСервере"", ""НаКлиентеНаСервере"", ""НаКлиентеНаСервере"">
Функция <?""Имя функции"">()

	<?>
	
	Возврат <?""Значение"">;

КонецФункции // <?""Имя функции"">()
"}
},
{0,
{"Возврат",0,0,"Во[зврат]","Возврат;<?>"}
},
{0,
{"Попытка",0,0,"По[пытка]","Попытка

	<?>

Исключение

КонецПопытки;"}
},
{0,
{"Директива компиляции",0,0,"Ди[ректива компиляции]","&<?""Выберите директиву компиляции"", ВыборВарианта, ""НаКлиенте"", ""НаКлиенте"", ""НаСервере"", ""НаСервере"", ""НаСервереБезКонтекста"", ""НаСервереБезКонтекста"", ""НаКлиентеНаСервере"", ""НаКлиентеНаСервере"", ""НаКлиентеНаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста"">"}
},
{0,
{"Инструкция Если (инструкция препроцессора)",0,0,"Ин[струкция Если (инструкция препроцессора)]","#Если <?""Выберите инструкцию препроцессора"", ВыборВарианта, ""Сервер"", ""Сервер"", ""Клиент"", ""Клиент"", ""ТонкийКлиент"", ""ТонкийКлиент"", ""ВебКлиент"", ""ВебКлиент"", ""ВнешнееСоединение"", ""ВнешнееСоединение"", ""ТолстыйКлиентУправляемоеПриложение"", ""ТолстыйКлиентУправляемоеПриложение"", ""ТолстыйКлиентОбычноеПриложение"", ""ТолстыйКлиентОбычноеПриложение""> Тогда
	<?>
#КонецЕсли"}
},
{0,
{"Инструкция Область",0,0,"Ин[струкция Область]","#Область <?>
	
#КонецОбласти"}
}
},
{19,
{"Прикладные",1,0,"",""},
{2,
{"Функциональные опции",1,0,"",""},
{0,
{"Получить функциональную опцию",0,1,"Функ[циональная опция]","ПолучитьФункциональнуюОпцию(""<?""Выберите функциональную опцию"", ОбъектМетаданных, ""ФункциональнаяОпция"">"")"}
},
{0,
{"Получить функциональную опцию интерфейса",0,1,"Функ[циональная опция]","ПолучитьФункциональнуюОпциюИнтерфейса(""<?""Выберите функциональную опцию"", ОбъектМетаданных, ""ФункциональнаяОпция"">"")"}
}
},
{4,
{"Общие формы",1,0,"",""},
{0,
{"Открыть общую форму",0,0,"Открыть[Форму]","ОткрытьФорму(""ОбщаяФорма.<?""Выберите общую форму"", ОбъектМетаданных, ""ОбщаяФорма"">"");"}
},
{0,
{"Открыть общую форму (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""ОбщаяФорма.<?""Выберите общую форму"", ОбъектМетаданных, ""ОбщаяФорма"">"", ПараметрыФормы);"}
},
{0,
{"Получить общую форму",0,0,"Получить[Форму]","ПолучитьФорму(""ОбщаяФорма.<?""Выберите общую форму"", ОбъектМетаданных, ""ОбщаяФорма"">"");"}
},
{0,
{"Получить общую форму (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""ОбщаяФорма.<?""Выберите общую форму"", ОбъектМетаданных, ""ОбщаяФорма"">"");
"}
}
},
{5,
{"Планы обмена",1,0,"",""},
{0,
{"Открыть форму плана обмена",0,0,"Открыть[Форму]","ОткрытьФорму(""ПланОбмена.<?""Выберите план обмена"", ПланОбмена>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"");"}
},
{0,
{"Открыть форму плана обмена (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""ПланОбмена.<?""Выберите план обмена"", ПланОбмена>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму плана обмена",0,0,"Получить[Форму]","ПолучитьФорму(""ПланОбмена.<?""Выберите план обмена"", ПланОбмена>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"");"}
},
{0,
{"Получить форму плана обмена (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""ПланОбмена.<?""Выберите план обмена"", ПланОбмена>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Обход элементов",0,0,"","Выборка = ПланыОбмена.<?"""", ПланОбмена>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
}
},
{3,
{"Константы",1,0,"",""},
{0,
{"Получить/установить",0,0,"Конст[анты]","Константы.<?"""", Константа>.<?""Выбор метода"", ВыборВарианта, ""Получить"", ""Получить"", ""Установить"", ""Установить"">()"}
},
{0,
{"Установить",0,0,"","Константы.<?"""", Константа>.Установить(<?>);"}
},
{0,
{"Получить",0,0,"","Константы.<?"""", Константа>.Получить()"}
}
},
{6,
{"Справочники",1,0,"",""},
{0,
{"Открыть форму справочника",0,0,"Открыть[Форму]","ОткрытьФорму(""Справочник.<?""Выберите справочник"", Справочник>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму справочника (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""Справочник.<?""Выберите справочник"", Справочник>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму справочника",0,0,"Получить[Форму]","ПолучитьФорму(""Справочник.<?""Выберите справочник"", Справочник>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму справочника (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""Справочник.<?""Выберите справочник"", Справочник>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Обход элементов",0,0,"","Выборка = Справочники.<?"""", Справочник>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Обход элементов иерархически",0,0,"","Выборка = Справочники.<?"""", Справочник>.ВыбратьИерархически();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
}
},
{7,
{"Документы",1,0,"",""},
{2,
{"Табличный документ",1,0,"",""},
{0,
{"ТабДок",0,0,"ТабДок=","ТабДок = <?"""", ВыборВарианта, ""ЭлементыФормы.ТабДок"", ""ЭлементыФормы.ТабДок"", ""Новый ТабличныйДокумент"", ""Новый ТабличныйДокумент"">;
<?>"}
},
{0,
{"ПолучитьОбласть",0,0,"Обл=","<?""Название области""> = <?>.ПолучитьОбласть(""<?""Название области"">"");"}
}
},
{0,
{"Открыть форму документа",0,0,"Открыть[Форму]","ОткрытьФорму(""Документ.<?""Выберите документ"", Документ>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму документа (с параметрами)",0,0,"Открыть[ форму документа (с параметрами)]","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""Документ.<?""Выберите документ"", Документ>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму документа",0,0,"Получить[Форму]","ПолучитьФорму(""Документ.<?""Выберите документ"", Документ>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму документа (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""Документ.<?""Выберите документ"", Документ>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Обход документов",0,0,"","Выборка = Документы.<?"""", Документ>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Движения",0,0,"","Движения.<?""Выбор регистра"", ОбъектМетаданных, ""РегистрСведений"", ""РегистрНакопления"", ""РегистрБухгалтерии"", ""РегистрРасчета"">"}
}
},
{4,
{"Отчеты",1,0,"",""},
{0,
{"Открыть форму отчета",0,0,"Открыть[Форму]","ОткрытьФорму(""Отчет.<?""Выберите отчет"", Отчет>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""ФормаНастроек"", ""ФормаНастроек"", ""ФормаРедактированияВарианта"", ""ФормаРедактированияВарианта"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму отчета (с параметрами)",0,0,"Открыть[Форму]","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""Отчет.<?""Выберите отчет"", Отчет>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""ФормаНастроек"", ""ФормаНастроек"", ""ФормаРедактированияВарианта"", ""ФормаРедактированияВарианта"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму отчета",0,0,"Получить[Форму]","ПолучитьФорму(""Отчет.<?""Выберите отчет"", Отчет>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""ФормаНастроек"", ""ФормаНастроек"", ""ФормаРедактированияВарианта"", ""ФормаРедактированияВарианта"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму отчета (с параметрами)",0,0,"Получить[Форму]","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""Отчет.<?""Выберите отчет"", Отчет>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""ФормаНастроек"", ""ФормаНастроек"", ""ФормаРедактированияВарианта"", ""ФормаРедактированияВарианта"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
}
},
{4,
{"Обработки",1,0,"",""},
{0,
{"Открыть форму обработки",0,0,"Открыть[Форму]","ОткрытьФорму(""Обработка.<?""Выберите обработку"", Обработка>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму обработки (с параметрами)",0,0,"Открыть[Форму]","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""Обработка.<?""Выберите обработку"", Обработка>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму обработки",0,0,"Получить[Форму]","ПолучитьФорму(""Обработка.<?""Выберите обработку"", Обработка>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму обработки (с параметрами)",0,0,"Получить[Форму]","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""Обработка.<?""Выберите обработку"", Обработка>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
}
},
{5,
{"Планы видов характеристик",1,0,"",""},
{0,
{"Открыть форму плана видов характеристик",0,0,"Открыть[Форму]","ОткрытьФорму(""ПланВидовХарактеристик.<?""Выберите ПВХ"", ПланВидовХарактеристик>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму плана видов характеристик (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""ПланВидовХарактеристик.<?""Выберите ПВХ"", ПланВидовХарактеристик>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму плана видов характеристик",0,0,"Получить[Форму]","ПолучитьФорму(""ПланВидовХарактеристик.<?""Выберите ПВХ"", ПланВидовХарактеристик>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму плана видов характеристик (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""ПланВидовХарактеристик.<?""Выберите ПВХ"", ПланВидовХарактеристик>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Обход видов характеристик",0,0,"","Выборка = ПланыВидовХарактеристик.<?"""", ПланВидовХарактеристик>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
}
},
{5,
{"Планы счетов",1,0,"",""},
{0,
{"Открыть форму плана счетов",0,0,"Открыть[Форму]","ОткрытьФорму(""ПланСчетов.<?""Выберите план счетов"", ПланСчетов>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму плана счетов (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""ПланСчетов.<?""Выберите план счетов"", ПланСчетов>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму плана счетов",0,0,"Получить[Форму]","ПолучитьФорму(""ПланСчетов.<?""Выберите план счетов"", ПланСчетов>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму плана счетов (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""ПланСчетов.<?""Выберите план счетов"", ПланСчетов>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Найти по коду",0,0,"","ПланыСчетов.<?"""", ПланСчетов>.НайтиПоКоду(<?>)"}
}
},
{5,
{"Планы видов расчета",1,0,"",""},
{0,
{"Открыть форму плана видов расчета",0,0,"Открыть[Форму]","ОткрытьФорму(""ПланВидовРасчета.<?""Выберите план видов расчета"", ПланВидовРасчета>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму плана видов расчета (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""ПланВидовРасчета.<?""Выберите план видов расчета"", ПланВидовРасчета>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму плана видов расчета",0,0,"Получить[Форму]","ПолучитьФорму(""ПланВидовРасчета.<?""Выберите план видов расчета"", ПланВидовРасчета>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму плана видов расчета (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""ПланВидовРасчета.<?""Выберите план видов расчета"", ПланВидовРасчета>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Обход видов расчета",0,0,"","Выборка = ПланыВидовРасчета.<?"""", ПланВидовРасчета>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
}
},
{5,
{"Бизнес-процессы",1,0,"",""},
{0,
{"Открыть форму бизнес-процесса",0,0,"Открыть[Форму]","ОткрытьФорму(""БизнесПроцесс.<?""Выберите бизнес-процесс"", БизнесПроцесс>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму бизнес-процесса (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""БизнесПроцесс.<?""Выберите бизнес-процесс"", БизнесПроцесс>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму бизнес-процесса",0,0,"Получить[Форму]","ПолучитьФорму(""БизнесПроцесс.<?""Выберите бизнес-процесс"", БизнесПроцесс>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму бизнес-процесса (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""БизнесПроцесс.<?""Выберите бизнес-процесс"", БизнесПроцесс>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Обход бизнес-процессов",0,0,"","Выборка = БизнесПроцессы.<?"""", БизнесПроцесс>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
}
},
{4,
{"Задачи",1,0,"",""},
{0,
{"Открыть форму задачи",0,0,"Открыть[Форму]","ОткрытьФорму(""Задача.<?""Выберите задачу"", Задача>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму задачи (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""Задача.<?""Выберите задачу"", Задача>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму задачи",0,0,"Получить[Форму]","ПолучитьФорму(""Задача.<?""Выберите задачу"", Задача>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму задачи (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""Задача.<?""Выберите задачу"", Задача>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
}
},
{6,
{"Регистры сведений",1,0,"",""},
{0,
{"Открыть форму регистра сведений",0,0,"Открыть[Форму]","ОткрытьФорму(""РегистрСведений.<?""Выберите регистр сведений"", РегистрСведений>.<?""Выберите форму"", ВыборВарианта, ""Записи"", ""ФормаЗаписи"", ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму регистра сведений (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""РегистрСведений.<?""Выберите регистр сведений"", РегистрСведений>.<?""Выберите форму"", ВыборВарианта, ""Записи"", ""ФормаЗаписи"", ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму регистра сведений",0,0,"Получить[Форму]","ПолучитьФорму(""РегистрСведений.<?""Выберите регистр сведений"", РегистрСведений>.<?""Выберите форму"", ВыборВарианта, ""Записи"", ""ФормаЗаписи"", ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму регистра сведений (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""РегистрСведений.<?""Выберите регистр сведений"", РегистрСведений>.<?""Выберите форму"", ВыборВарианта, ""Записи"", ""ФормаЗаписи"", ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Выборка записей регистра сведений",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр сведений"", РегистрСведений>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Выборка записей регистра сведений (по регистратору)",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр сведений"", РегистрСведений>.ВыбратьПоРегистратору(<?>);

Пока Выборка.Следующий() Цикл


КонецЦикла;"}
}
},
{6,
{"Регистры накопления",1,0,"",""},
{0,
{"Открыть форму регистра накопления",0,0,"Открыть[Форму]","ОткрытьФорму(""РегистрНакопления.<?""Выберите регистр накопления"", РегистрНакопления>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму регистра накопления (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""РегистрНакопления.<?""Выберите регистр накопления"", РегистрНакопления>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму регистра накопления",0,0,"Получить[Форму]","ПолучитьФорму(""РегистрНакопления.<?""Выберите регистр накопления"", РегистрНакопления>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму регистра накопления (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""РегистрНакопления.<?""Выберите регистр накопления"", РегистрНакопления>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Выборка записей регистра накопления",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр накопления"", РегистрНакопления>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Выборка записей регистра накопления (по регистратору)",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр накопления"", РегистрНакопления>.ВыбратьПоРегистратору(<?>);

Пока Выборка.Следующий() Цикл


КонецЦикла;"}
}
},
{6,
{"Регистры бухгалтерии",1,0,"",""},
{0,
{"Открыть форму регистра бухгалтерии",0,0,"Открыть[Форму]","ОткрытьФорму(""РегистрБухгалтерии.<?""Выберите регистр бухгалтерии"", РегистрБухгалтерии>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму регистра бухгалтерии (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""РегистрБухгалтерии.<?""Выберите регистр бухгалтерии"", РегистрБухгалтерии>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму регистра бухгалтерии",0,0,"Получить[Форму]","ПолучитьФорму(""РегистрБухгалтерии.<?""Выберите регистр бухгалтерии"", РегистрБухгалтерии>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму регистра бухгалтерии (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""РегистрБухгалтерии.<?""Выберите регистр бухгалтерии"", РегистрБухгалтерии>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Выборка записей регистра бухгалтерии",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр бухгалтерии"", РегистрБухгалтерии>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Выборка записей регистра бухгалтерии (по регистратору)",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр бухгалтерии"", РегистрБухгалтерии>.ВыбратьПоРегистратору(<?>);

Пока Выборка.Следующий() Цикл


КонецЦикла;"}
}
},
{6,
{"Регистры расчета",1,0,"",""},
{0,
{"Открыть форму регистра расчета",0,0,"Открыть[Форму]","ОткрытьФорму(""РегистрРасчета.<?""Выберите регистр расчета"", РегистрРасчета>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму регистра расчета (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""РегистрРасчета.<?""Выберите регистр расчета"", РегистрРасчета>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму регистра расчета",0,0,"Получить[Форму]","ПолучитьФорму(""РегистрРасчета.<?""Выберите регистр расчета"", РегистрРасчета>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму регистра расчета (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""РегистрРасчета.<?""Выберите регистр расчета"", РегистрРасчета>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Выборка записей регистра расчета",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр расчета"", РегистрРасчета>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Выборка записей регистра расчета (по регистратору)",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр расчета"", РегистрРасчета>.ВыбратьПоРегистратору(<?>);

Пока Выборка.Следующий() Цикл


КонецЦикла;"}
}
},
{4,
{"Текст",1,0,"",""},
{0,
{"Шрифт",0,0,"Шрифт=","//	КОНСТРУКТОР	Имя шрифта, Размер, Жирный, Наклонный, Подчеркнутый, Зачеркнутый
Шрифт = Новый Шрифт(   <?>       ,       ,       ,          ,             ,            );"}
},
{0,
{"Формат",0,0,"Формат","Формат(<?>, ""<?, ФорматнаяСтрока>"")"}
},
{0,
{"Форматная строка",0,1,"","""<?, ФорматнаяСтрока>"""}
},
{0,
{"СтрШаблон",0,0,"Ст[рШаблон]","СтрШаблон(""%1 <? ""Текст 1""> %2 <? ""Текст 2""> %3 <? ""Текст 3"">"",
	<?""Значение 1"">,
	<?""Значение 2"">,
	<?""Значение 3"">);
"}
}
},
{3,
{"Прочие",1,0,"",""},
{0,
{"Проверка типа",0,0,"Пр[оверка типа]","Если ТипЗнч(<?""Выражение для проверки типа"">) = Тип(""<?""Выберите тип"", ВыборТипа>"") Тогда

	<?>

КонецЕсли;"}
},
{0,
{"КонструкторОписанияТипов",0,0,"","<?""Конструктор описания типов"", КонструкторОписанияТипов>"}
},
{0,
{"Перечисление",0,1,"Переч[исление]","ПредопределенноеЗначение(""Перечисление.<?""Выберите значение перечисления"", ЗначениеПеречисления>"")"}
}
}
},
{6,
{"Коллекции значений",1,0,"",""},
{0,
{"ТаблицаЗначений",0,0,"Та[блицаЗначений]","ТаблицаЗначений = Новый ТаблицаЗначений;
<?>"}
},
{0,
{"Массив",0,0,"Ма[ссив]","Массив = Новый Массив(<?>);"}
},
{0,
{"Соответствие",0,0,"Со[ответствие]","Соответствие = Новый Соответствие;
<?>"}
},
{0,
{"Структура",0,0,"Ст[руктура]","Структура = Новый Структура;
<?>"}
},
{0,
{"СписокЗначений",0,0,"Сп[исокЗначений]","СписокЗначений = Новый СписокЗначений;
<?>"}
},
{0,
{"ДеревоЗначений",0,0,"Де[ревоЗначений]","ДеревоЗначений = Новый ДеревоЗначений;
<?>"}
}
},
{17,
{"Запросы",1,0,"",""},
{0,
{"Выборка",0,0,"Выборка=","Выборка = <?>.Выбрать();
Пока Выборка.Следующий() Цикл

КонецЦикла; "}
},
{0,
{"Запрос",0,0,"","Запрос = Новый Запрос;
Запрос.Текст = ""<?"""", ТекстЗапроса>"";

Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();

Пока Выборка.Следующий() Цикл

	

КонецЦикла;
"}
},
{0,
{"Запрос с конструктором",0,0,"Запрос=","Запрос = Новый Запрос;
Запрос.Текст = ""<?"""", ТекстЗапроса>"";
Запрос.УстановитьПараметр("""", <?>);
РезультатЗапроса = Запрос.Выполнить();

"}
},
{0,
{"Запрос с параметром",0,0,"","Запрос = Новый Запрос;
Запрос.Текст = ""<?"""", ТекстЗапроса>"";

Запрос.УстановитьПараметр(""<?>"", );

Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();

Пока Выборка.Следующий() Цикл

	

КонецЦикла;
"}
},
{0,
{"Запрос вручную",0,0,"Запрос=","Запрос = Новый Запрос;
Запрос.Текст = ""
|ВЫБРАТЬ
|   <?>
|
|
|
|
|
|
|
|"";

Запрос.УстановитьПараметр("""", );
РезультатЗапроса = Запрос.Выполнить();
"}
},
{0,
{"ВЫБОР",0,0,"ВЫБОР","ВЫБОР КОГДА <?> ТОГДА ИНАЧЕ КОНЕЦ"}
},
{0,
{"Документ",0,0,"Документ.","Документ.<?"""", ОбъектМетаданных, ""Документ"", ""Документ.Реквизит"", ""Документ.ТабличнаяЧасть"", ""Документ.ТабличнаяЧасть.Реквизит"">"}
},
{0,
{"Справочник",0,0,"Справочник.","Справочник.<?"""", ОбъектМетаданных, ""Справочник"", ""Справочник.Реквизит"", ""Справочник.ТабличнаяЧасть"", ""Справочник.ТабличнаяЧасть.Реквизит"">"}
},
{0,
{"РегистрСведений",0,0,"РегистрСведений.","РегистрСведений.<?"""", ОбъектМетаданных, ""РегистрСведений"", ""РегистрСведений.Реквизит"", ""РегистрСведений.Измерение"">"}
},
{0,
{"РегистрНакопления",0,0,"РегистрНакопления.","РегистрНакопления.<?"""", ОбъектМетаданных, ""РегистрНакопления"", ""РегистрНакопления.Ресурс"", ""РегистрНакопления.Реквизит"", ""РегистрНакопления.Измерение"">"}
},
{0,
{"РегистрБухгалтерии",0,0,"РегистрБухгалтерии.","РегистрБухгалтерии.<?"""", ОбъектМетаданных, ""РегистрБухгалтерии"", ""РегистрБухгалтерии.Измерение"", ""РегистрБухгалтерии.Ресурс"", ""РегистрБухгалтерии.Реквизит"">"}
},
{0,
{"РегистрРасчета",0,0,"РегистрРасчета.","РегистрРасчета.<?"""", ОбъектМетаданных, ""РегистрРасчета"", ""РегистрРасчета.Ресурс"", ""РегистрРасчета.Реквизит"", ""РегистрРасчета.Измерение"", ""РегистрРасчета.Перерасчет"", ""РегистрРасчета.Перерасчет.Измерение"">"}
},
{0,
{"Условие(Отбор по Тип документа)",0,0,"","ГДЕ ТИПЗНАЧЕНИЯ(Регистратор) = ТИП(Документ.ВидДокумента)

//или

ГДЕ ТИПЗНАЧЕНИЯ(Регистратор) = &ТипРегистратора"}
},
{0,
{"ЕстьNULL",0,0,"","ЕСТЬNULL(<Проверяемое выражение>, <Выражение замены>)"}
},
{0,
{"РАЗНОСТЬДАТ",0,0,"","РАЗНОСТЬДАТ(ОткудаОтнимаемДата, ЧтоОтнимаемДата, МИНУТА)"}
},
{0,
{"НАЧАЛОПЕРИОДА",0,0,"******.Дата","НАЧАЛОПЕРИОДА(******.Дата, ДЕНЬ)"}
},
{0,
{"Возврат с проверкой по запросу",0,0,"Во[зврат с проверкой по запросу]","Возврат НЕ Запрос.Выполнить().Пустой()"}
}
},
{2,
{"Диалоговые",1,0,"",""},
{5,
{"Модальні",1,0,"",""},
{0,
{"Предупреждение",0,0,"Пр[едупреждение]","Предупреждение(<?>,60);"}
},
{0,
{"Сообщить",0,0,"Сооб[щить]","Сообщить(<?>);"}
},
{0,
{"ВыборФайла",0,1,"ВыборФайла=","ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
ВыборФайла.ПолноеИмяФайла = <?>;
Если Не ВыборФайла.Выбрать() Тогда
	Возврат;		
КонецЕсли;"}
},
{0,
{"Вопрос",0,0,"Ответ=","Ответ = Вопрос(""<?""Текст вопроса"">"", <?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">, 60)"}
},
{0,
{"Вопрос с анализом результата",0,0,"Ответ=","Ответ = Вопрос(""<?""Текст вопроса"">"", <?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">, 60);
Если Ответ <?"""", ВыборВарианта, ""Равен"", ""="", ""Не равен"", ""<>""> <?""Код возврата диалога"", ВыборВарианта, ""Да"", ""КодВозвратаДиалога.Да"", ""Нет"", ""КодВозвратаДиалога.Нет"", ""ОК"", ""КодВозвратаДиалога.ОК"", ""Отмена"", ""КодВозвратаДиалога.Отмена"", ""Повторить"", ""КодВозвратаДиалога.Повторить"", ""Прервать"", ""КодВозвратаДиалога.Прервать"", ""Пропустить"", ""КодВозвратаДиалога.Пропустить"", ""Тайаут"", ""КодВозвратаДиалога.Таймаут""> Тогда
	<?>
КонецЕсли; "}
}
},
{2,
{"НеМодальні",1,0,"",""},
{0,
{"ДиалогСВопросом",0,0,"Диа[логСВопросом]","
#Область ДиалогСВопросом

	Оповещение = Новый ОписаниеОповещения(""ПослеЗакрытияВопроса"", ЭтотОбъект);
	
	ПоказатьВопрос(Оповещение,
					""<?""Вопрос"">"",
					РежимДиалогаВопрос.ДаНетОтмена,
					0, // таймаут в секундах
					КодВозвратаДиалога.Да, // (необ.) кнопка по умолчанию
					""<?""Заголовок"">"",
					);
					
#КонецОбласти

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		
	КонецЕсли;
	
КонецПроцедуры"}
},
{0,
{"ОткрытьФормуВыбораСПараметрамиОтбора",0,1,"Отк[рытьФормуВыбораСПараметрамиОтбора]","#Область ОткрытьФормуВыбораСПараметрамиОтбора
//ФормаЭлементаВладелец
//Передача параметров для отбора на форму выбора (отбирает по Организации и Списку проектов)
//Результат можно ловить в двух процедурах  ОбработкаВыбора (прописать в свойствах форми) или в процедуре - ВыборЗавершение через ОписаниеОповещения
//Реализация для Команды Кнопки

&НаКлиенте
Процедура ОткрытьФормуВыбораСПараметрамиОтбора()
	
	#Область ОтборПоОрганизации
	НастройкаОтбораПоОрганизация = Новый Структура;
	НастройкаОтбораПоОрганизация.Вставить(""ЛевоеЗначение"", Новый ПолеКомпоновкиДанных(""Организация""));
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		НастройкаОтбораПоОрганизация.Вставить(""ВидСравнения"", ВидСравненияКомпоновкиДанных.ВСписке);
		НастройкаОтбораПоОрганизация.Вставить(""ПравоеЗначение"", Объект.Организация);
	Иначе
		НастройкаОтбораПоОрганизация.Вставить(""ВидСравнения"", ВидСравненияКомпоновкиДанных.НеРавно);
		НастройкаОтбораПоОрганизация.Вставить(""ПравоеЗначение"", Неопределено);
	КонецЕсли;
	
	НастройкаОтбораПоОрганизация.Вставить(""ПравоеЗначение"", Объект.Организация);
	НастройкаОтбораПоОрганизация.Вставить(""РежимОтображения"", РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	#КонецОбласти
	
	#Область ОтборПоПроект
	НастройкаОтбораПоПроект = Новый Структура;
	НастройкаОтбораПоПроект.Вставить(""ЛевоеЗначение"", Новый ПолеКомпоновкиДанных(""Проект""));
		
	Если ЗначениеЗаполнено(Объект.Проект) Тогда
		НастройкаОтбораПоПроект.Вставить(""ВидСравнения"", ВидСравненияКомпоновкиДанных.ВСписке);
		СписокПроект = Новый СписокЗначений; //СписокПроектов
		СписокПроект.Добавить(Объект.Проект);
		НастройкаОтбораПоПроект.Вставить(""ПравоеЗначение"", СписокПроект);
	Иначе
		НастройкаОтбораПоПроект.Вставить(""ВидСравнения"", ВидСравненияКомпоновкиДанных.НеРавно);
		НастройкаОтбораПоПроект.Вставить(""ПравоеЗначение"", Неопределено);
	КонецЕсли;

	НастройкаОтбораПоПроект.Вставить(""РежимОтображения"", РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	#КонецОбласти
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить(""Организация"", НастройкаОтбораПоОрганизация);
	ПараметрыОтбора.Вставить(""Проект"", НастройкаОтбораПоПроект);
	
	ПараметрыОткрытия = Новый Структура(""ПараметрыОтбора"", ПараметрыОтбора);
	ОткрытьФорму(""Документ.ПЕК_РеестрДоговоровГПХ.Форма.ФормаВыбораУпр"", ПараметрыОткрытия, ЭтаФорма,,,,Новый ОписаниеОповещения(""ВыборЗавершение"", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		
		Сообщить (СтрШаблон(""%1 Ничего не выбрано %2"",
								РезультатЗакрытия,
								ДополнительныеПараметры),
							СтатусСообщения.Внимание);

	Иначе
	
		Сообщить (СтрШаблон(""%1 Выбран элемент: %2"",
								РезультатЗакрытия,
								ДополнительныеПараметры),
							СтатусСообщения.Внимание);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ВыбранноеЗначение = Неопределено Тогда
		
		Сообщить (СтрШаблон(""%1 Ничего не выбрано %2"",
								ВыбранноеЗначение,
								ИсточникВыбора),
							СтатусСообщения.Внимание);

	Иначе
	
		Сообщить (СтрШаблон(""%1 Выбран элемент: %2"",
								ВыбранноеЗначение,
								ИсточникВыбора),
							СтатусСообщения.Внимание);
		
	КонецЕсли;

//Открываемая форма /ФормаВыбораУпр
//В параметры добавить - ""ПараметрыОтбора"", тип-Произвольный
//При Открытии не завелась не видит параметры.

&НаСервере
Процедура НастроитьОтборСписка()
	
	Перем ПараметрыОтбора, РежимОтображения;
	
	Если Параметры.Свойство(""ПараметрыОтбора"", ПараметрыОтбора)
		
		И ТипЗнч(ПараметрыОтбора) = Тип(""Структура"") Тогда
		
		Отбор = Список.Отбор.Элементы;
		
		Для Каждого ЭлементСтруктуры Из ПараметрыОтбора Цикл 
			
			ИмяОтбора = ЭлементСтруктуры.Ключ;
			
			НастройкаОтбора = ЭлементСтруктуры.Значение;
			
			Если НЕ НастройкаОтбора.Свойство(""РежимОтображения"", РежимОтображения) Тогда 
				
				РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
				
			КонецЕсли;
			
			ЭлементОтбора = Отбор.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
			ЭлементОтбора.ИдентификаторПользовательскойНастройки = ИмяОтбора;
			ЭлементОтбора.Представление = ИмяОтбора;
			ЭлементОтбора.ПредставлениеПользовательскойНастройки = ИмяОтбора;
			ЭлементОтбора.РежимОтображения = РежимОтображения;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ВидСравнения = НастройкаОтбора.ВидСравнения;
			ЭлементОтбора.ЛевоеЗначение = НастройкаОтбора.ЛевоеЗначение;
			ЭлементОтбора.ПравоеЗначение = НастройкаОтбора.ПравоеЗначение;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастроитьОтборСписка();
	
КонецПроцедуры

#КонецОбласти 
"}
}
}
},
{4,
{"Оформление",1,0,"",""},
{0,
{"Шаблон разделов для общих модулей",0,0,"Обл[астиДляОбщегоМодуля]","////////////////////////////////////////////////////////////////////////////////
// Шаблон (заготовка для копирования) разделов для общих модулей
// 
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс
//содержит экспортные процедуры и функции, предназначенные для использования другими объектами конфигурации или другими программами (например, через внешнее соединение). 
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
//предназначен для модулей, которые являются частью некоторой функциональной подсистемы. В нем должны быть размещены экспортные процедуры и функции, которые допустимо вызывать только из других функциональных подсистем этой же библиотеки. 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
//содержит процедуры и функции, составляющие внутреннюю реализацию общего модуля. В тех случаях, когда общий модуль является частью некоторой функциональной подсистемы, включающей в себя несколько объектов метаданных, в этом разделе также могут быть размещены служебные экспортные процедуры и функции, предназначенные только для вызова из других объектов данной подсистемы. 
#КонецОбласти"}
},
{0,
{"Шаблон оформления разделов для модулей форм",0,0,"Обл[астиДляМодулейФорм]","////////////////////////////////////////////////////////////////////////////////
// Шаблон оформления разделов для модулей форм
// 
////////////////////////////////////////////////////////////////////////////////
#Область ОбработчикиСобытийФормы
//содержит процедуры-обработчики событий формы: ПриСозданииНаСервере, ПриОткрытии и т.п. 
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
//содержит процедуры-обработчики элементов, расположенных в основной части формы (все, что не связано с таблицами на форме). 
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы<ИмяТаблицыФормы>
//размещаются процедуры-обработчики таблиц формы и элементов таблиц. Для процедур-обработчиков каждой таблицы должен быть создан свой раздел. 
#КонецОбласти

#Область ОбработчикиКомандФормы
//содержит процедуры-обработчики команд формы (имена которых задаются в свойстве Действие команд формы). 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
//содержит процедуры и функции, составляющие внутреннюю реализацию модуля.
#КонецОбласти"}
},
{0,
{"Шаблон оформления разделов для модулей объектов, менеджеров, наборов записей, обработок, отчетов и т.п.",0,0,"Обл[астиДляМодулейОбъектов]","////////////////////////////////////////////////////////////////////////////////
// Шаблон оформления разделов для модулей объектов, менеджеров, наборов записей, обработок, отчетов и т.п.
// 
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс
//содержит экспортные процедуры и функции, предназначенные для использования в других модулях конфигурации или другими программами (например, через внешнее соединение). Не следует в этот раздел помещать экспортные функции и процедуры, которые предназначены для вызова исключительно из модулей самого объекта, его форм и команд. Например, процедуры заполнения табличной части документа, которые вызываются из обработки заполнения в модуле объекта и из формы документа в обработчике команды формы не являются программным интерфейсом модуля объекта, т.к. вызываются только в самом модуле и из форм этого же объекта. Их следует размещать в разделе «Служебные процедуры и функции». 
#КонецОбласти

#Область ОбработчикиСобытий
//содержит обработчики событий модуля объекта (ПриЗаписи, ПриПроведении и др.) 
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
//предназначен для модулей, которые являются частью некоторой функциональной подсистемы. В нем должны быть размещены экспортные процедуры и функции, которые допустимо вызывать только из других функциональных подсистем этой же библиотеки.  
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
//содержит процедуры и функции, составляющие внутреннюю реализацию общего модуля. В тех случаях, когда общий модуль является частью некоторой функциональной подсистемы, включающей в себя несколько объектов метаданных, в этом разделе также могут быть размещены служебные экспортные процедуры и функции, предназначенные только для вызова из других объектов данной подсистемы. .
#КонецОбласти"}
},
{0,
{"Шаблон оформления разделов для модулей команд",0,0,"Обл[астиДляМодулейКоманд]","////////////////////////////////////////////////////////////////////////////////
//  Шаблон оформления разделов для модулей команд
// 
////////////////////////////////////////////////////////////////////////////////
#Область ОбработчикиСобытий
//содержит процедуру-обработчик команды ОбработкаКоманды. 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
//содержит процедуры и функции, составляющие внутреннюю реализацию модуля.
#КонецОбласти"}
}
},
{0,
{"Цітковський Олександр область",0,1,"ЦО","//{ Цітковський Олександр <?""Дата день"">.<?""Дата месяц"">.<?""Дата год"">

//} Цітковський Олександр"}
},
{0,
{"Цітковський Олександр в строке",0,0,"ЦО","//- Цітковський Олександр <?""Дата день"">.<?""Дата месяц"">.<?""Дата год"">
"}
},
{0,
{"e_ОбщегоНазначения",0,0,"ё_","e_ОбщегоНазначения."}
}
}
}